name: Build Retro Budget APK (release)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Код репозиторію
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Java 17
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 3) Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      # 4) Створити проєкт (якщо відсутній)
      - name: Create Flutter project (if missing)
        run: |
          if [ ! -d "app-src" ]; then
            flutter create --platforms=android --project-name retrobudget app-src
          fi

      # 5) Додати залежності
      - name: Add pub dependencies
        working-directory: app-src
        run: |
          flutter pub add shared_preferences:^2.3.2
          flutter pub add fl_chart:^0.68.0

      # 6) Підкласти робочий main.dart (MVP з графіком+збереженням)
      - name: Inject lib/main.dart
        run: |
          mkdir -p app-src/lib
          cat > app-src/lib/main.dart <<'DART'
          import 'dart:convert';
          import 'package:flutter/material.dart';
          import 'package:shared_preferences/shared_preferences.dart';
          import 'package:fl_chart/fl_chart.dart';

          void main() => runApp(const RetroBudgetApp());

          class RetroBudgetApp extends StatelessWidget {
            const RetroBudgetApp({super.key});
            @override
            Widget build(BuildContext context) {
              final base = ThemeData.dark(useMaterial3: true);
              return MaterialApp(
                debugShowCheckedModeBanner: false,
                title: 'Ретро-бюджет',
                theme: base.copyWith(
                  scaffoldBackgroundColor: const Color(0xFF0E0F17),
                  colorScheme: base.colorScheme.copyWith(
                    primary: const Color(0xFFFFFC94),
                    secondary: const Color(0xFFFB8C0A),
                  ),
                  appBarTheme: base.appBarTheme.copyWith(
                    backgroundColor: Colors.black,
                    foregroundColor: Colors.white,
                    titleTextStyle: const TextStyle(
                      fontWeight: FontWeight.w700,
                      fontSize: 22,
                      color: Colors.white,
                    ),
                  ),
                  floatingActionButtonTheme: const FloatingActionButtonThemeData(
                    backgroundColor: Color(0xFFFFFC94),
                    foregroundColor: Colors.black,
                  ),
                ),
                home: const HomePage(),
              );
            }
          }

          class Expense {
            final String category;
            final double amount;
            final DateTime date;
            Expense({required this.category, required this.amount, required this.date});
            Map<String, dynamic> toJson() => {
              'category': category,
              'amount': amount,
              'date': date.toIso8601String(),
            };
            static Expense fromJson(Map<String, dynamic> j) => Expense(
              category: j['category'] as String,
              amount: (j['amount'] as num).toDouble(),
              date: DateTime.parse(j['date'] as String),
            );
          }

          class HomePage extends StatefulWidget {
            const HomePage({super.key});
            @override
            State<HomePage> createState() => _HomePageState();
          }

          class _HomePageState extends State<HomePage> {
            final List<Expense> _items = [];
            bool _loading = true;

            @override
            void initState() {
              super.initState();
              _load();
            }

            Future<void> _load() async {
              final sp = await SharedPreferences.getInstance();
              final raw = sp.getString('expenses') ?? '[]';
              final list = (jsonDecode(raw) as List).cast<Map<String, dynamic>>();
              _items
                ..clear()
                ..addAll(list.map(Expense.fromJson));
              setState(() => _loading = false);
            }

            Future<void> _save() async {
              final sp = await SharedPreferences.getInstance();
              await sp.setString(
                'expenses',
                jsonEncode(_items.map((e) => e.toJson()).toList()),
              );
            }

            Future<void> _addDialog() async {
              final catCtrl = TextEditingController();
              final amtCtrl = TextEditingController();
              final ok = await showDialog<bool>(
                context: context,
                builder: (_) => AlertDialog(
                  title: const Text('Додати витрату'),
                  content: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        controller: catCtrl,
                        decoration: const InputDecoration(labelText: 'Категорія'),
                      ),
                      TextField(
                        controller: amtCtrl,
                        decoration: const InputDecoration(labelText: 'Сума'),
                        keyboardType: TextInputType.number,
                      ),
                    ],
                  ),
                  actions: [
                    TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('Скасувати')),
                    FilledButton(onPressed: () => Navigator.pop(context, true), child: const Text('Додати')),
                  ],
                ),
              );
              if (ok == true) {
                final cat = catCtrl.text.trim();
                final amount = double.tryParse(amtCtrl.text.replaceAll(',', '.')) ?? 0;
                if (cat.isNotEmpty && amount > 0) {
                  setState(() {
                    _items.add(Expense(category: cat, amount: amount, date: DateTime.now()));
                  });
                  await _save();
                }
              }
            }

            double get _total => _items.fold(0, (s, e) => s + e.amount);

            Map<String, double> _byCategory() {
              final m = <String, double>{};
              for (final e in _items) {
                m[e.category] = (m[e.category] ?? 0) + e.amount;
              }
              return m;
            }

            @override
            Widget build(BuildContext context) {
              if (_loading) {
                return const Scaffold(body: Center(child: CircularProgressIndicator()));
              }
              final byCat = _byCategory();
              final sections = byCat.entries.map((e) {
                final v = e.value;
                return PieChartSectionData(
                  title: '${e.key}\n${v.toStringAsFixed(0)}',
                  value: v,
                  radius: 70,
                );
              }).toList();

              return Scaffold(
                appBar: AppBar(title: const Text('Ретро-бюджет')),
                floatingActionButton: FloatingActionButton(
                  onPressed: _addDialog,
                  child: const Icon(Icons.add),
                ),
                body: ListView(
                  padding: const EdgeInsets.all(16),
                  children: [
                    Card(
                      child: Padding(
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text('Разом за всі часи', style: TextStyle(fontSize: 16)),
                            const SizedBox(height: 8),
                            Text('${_total.toStringAsFixed(2)}',
                                style: const TextStyle(fontSize: 28, fontWeight: FontWeight.bold)),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 12),
                    if (sections.isNotEmpty)
                      Card(
                        child: SizedBox(
                          height: 220,
                          child: PieChart(PieChartData(sections: sections, centerSpaceRadius: 32)),
                        ),
                      ),
                    const SizedBox(height: 12),
                    Card(
                      child: Column(
                        children: [
                          const ListTile(title: Text('Останні витрати')),
                          const Divider(height: 1),
                          ..._items.reversed.map((e) => ListTile(
                                title: Text(e.category),
                                subtitle: Text('${e.date.toLocal()}'.split('.').first),
                                trailing: Text('-${e.amount.toStringAsFixed(2)}'),
                              )),
                          if (_items.isEmpty)
                            const Padding(
                              padding: EdgeInsets.all(16),
                              child: Text('Ще немає витрат. Натисни + щоб додати.'),
                            ),
                        ],
                      ),
                    ),
                  ],
                ),
              );
            }
          }
          DART

      # 7) Патчимо Kotlin / AGP / Gradle wrapper перед збіркою
      - name: Patch Android Gradle & Kotlin versions
        working-directory: app-src/android
        run: |
          # Kotlin Gradle plugin (plugins{} у build.gradle або settings.gradle)
          sed -i 's/id "org.jetbrains.kotlin.android" version ".*"/id "org.jetbrains.kotlin.android" version "2.0.20"/' build.gradle || true
          sed -i 's/kotlin("android") version ".*"/kotlin("android") version "2.0.20"/' settings.gradle || true

          # Android Gradle Plugin (classpath)
          sed -i 's/com\.android\.tools\.build:gradle:[0-9.]\+/com.android.tools.build:gradle:8.7.2/' build.gradle || true

          # Gradle wrapper
          sed -i 's/gradle-[0-9.]\+-all.zip/gradle-8.7-all.zip/' gradle/wrapper/gradle-wrapper.properties || true

      # 8) Збірка APK (split per ABI)
      - name: Build APK (release, split)
        working-directory: app-src
        run: flutter build apk --release --split-per-abi

      # 9) Артефакти
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: retro_apk_release_split
          path: app-src/build/app/outputs/flutter-apk/*.apk
