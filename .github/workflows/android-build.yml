name: Build signed release APK (installable)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      # 1) Створюємо проект
      - name: Create Flutter project
        run: |
          flutter create . --platforms=android --project-name retro_budget --org com.rb.auto --overwrite

      # 2) Додаємо мінімальний екран
      - name: Inject app source
        run: |
          mkdir -p lib
          cat > lib/main.dart << 'EOF'
          import 'package:flutter/material.dart';
          void main() => runApp(const MyApp());
          class MyApp extends StatelessWidget {
            const MyApp({super.key});
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                debugShowCheckedModeBanner: false,
                title: 'Retro Budget',
                theme: ThemeData.dark(useMaterial3: true).copyWith(
                  scaffoldBackgroundColor: const Color(0xFF0F1E17),
                  colorScheme: const ColorScheme.dark(
                    primary: Color(0xFFC49A41), secondary: Color(0xFF557153),
                  ),
                ),
                home: Scaffold(
                  appBar: AppBar(title: const Text('Розподіл коштів')),
                  body: const Center(child: Text('Баланс (демо)', style: TextStyle(fontSize: 22))),
                  floatingActionButton: FloatingActionButton.extended(
                    onPressed: null, label: Text('Додати'), icon: Icon(Icons.add)),
                ),
              );
            }
          }
          EOF

      # 3) Унікальний applicationId, щоб не конфліктував з чимось, що вже стояло
      - name: Set unique applicationId
        run: |
          sed -i 's/applicationId "[^"]*"/applicationId "com.rb.auto.retro_${{ github.run_id }}"/' android/app/build.gradle

      # 4) Генеруємо тимчасовий release-кеystore і підписуємо APK
      - name: Create keystore & config
        run: |
          keytool -genkey -v -keystore android/retro_tmp.jks -alias upload -keyalg RSA -keysize 2048 -validity 10000 -storepass 123456 -keypass 123456 -dname "CN=Retro,O=RB,C=UA"
          cat > key.properties << 'EOF'
          storeFile=android/retro_tmp.jks
          storePassword=123456
          keyAlias=upload
          keyPassword=123456
          EOF
          # Додаємо конфіг підпису в build.gradle (якщо його нема)
          if ! grep -q "keystoreProperties" android/app/build.gradle; then
            awk '1; /android {/ {print "    def keystorePropertiesFile = rootProject.file(\"key.properties\")\n    def keystoreProperties = new Properties()\n    if (keystorePropertiesFile.exists()) keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n    signingConfigs { release { keyAlias keystoreProperties[\"keyAlias\"]; keyPassword keystoreProperties[\"keyPassword\"]; storeFile file(keystoreProperties[\"storeFile\"]); storePassword keystoreProperties[\"storePassword\"]; }}\n    buildTypes { release { signingConfig signingConfigs.release } }"; next }' android/app/build.gradle > tmp && mv tmp android/app/build.gradle
          fi

      - name: flutter pub get
        run: flutter pub get

      # 5) Збираємо розділені APK під кожну архітектуру
      - name: Build signed split APKs (release)
        run: flutter build apk --release --split-per-abi

      - uses: actions/upload-artifact@v4
        with:
          name: retro_apk_release_split
          path: build/app/outputs/flutter-apk/*.apk
