name: Build Android APK (debug, MVP)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      # 1) Створюємо повний проєкт у підпапці app/
      - name: Create Flutter project in subdir
        run: flutter create app --platforms=android --project-name retrobudget --org com.rb.unique123 --overwrite

      # 2) Додаємо мінімальні залежності
      - name: Add dependencies
        working-directory: app
        run: |
          flutter pub add shared_preferences
          flutter pub add intl

      # 3) Підміняємо lib/main.dart на MVP-версію (список витрат + додавання, збереження)
      - name: Inject main.dart (MVP)
        run: |
          cat > app/lib/main.dart << 'EOF'
          import 'dart:convert';
          import 'package:flutter/material.dart';
          import 'package:intl/intl.dart';
          import 'package:shared_preferences/shared_preferences.dart';

          void main() {
            WidgetsFlutterBinding.ensureInitialized();
            runApp(const RetroBudgetApp());
          }

          /// ======== ТЕМА + ОБГОРТКА ========
          class RetroBudgetApp extends StatelessWidget {
            const RetroBudgetApp({super.key});

            @override
            Widget build(BuildContext context) {
              final base = ThemeData.dark(useMaterial3: true);
              return MaterialApp(
                debugShowCheckedModeBanner: false,
                title: 'Ретро-бюджет',
                theme: base.copyWith(
                  scaffoldBackgroundColor: const Color(0xFF0F1E17),
                  colorScheme: base.colorScheme.copyWith(
                    primary: const Color(0xFFFFC94A),
                    secondary: const Color(0xFFB8C0AA),
                  ),
                  appBarTheme: base.appBarTheme.copyWith(
                    backgroundColor: Colors.black,
                    foregroundColor: Colors.white,
                    titleTextStyle: const TextStyle(
                      fontWeight: FontWeight.w700,
                      fontSize: 22,
                      color: Colors.white,
                    ),
                  ),
                  floatingActionButtonTheme: const FloatingActionButtonThemeData(
                    backgroundColor: Color(0xFFFFC94A),
                    foregroundColor: Colors.black,
                  ),
                  listTileTheme: const ListTileThemeData(
                    iconColor: Colors.white70,
                    textColor: Colors.white,
                  ),
                  cardTheme: const CardTheme(
                    color: Color(0xFF15231C),
                    margin: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(14)),
                    ),
                  ),
                ),
                home: const HomePage(),
              );
            }
          }

          /// ======== МОДЕЛЬ ========
          class Expense {
            final String id;
            final String title;
            final double amount;
            final DateTime date;
            final String category;

            Expense({
              required this.id,
              required this.title,
              required this.amount,
              required this.date,
              required this.category,
            });

            Map<String, dynamic> toJson() => {
              'id': id,
              'title': title,
              'amount': amount,
              'date': date.toIso8601String(),
              'category': category,
            };

            factory Expense.fromJson(Map<String, dynamic> json) => Expense(
              id: json['id'] as String,
              title: json['title'] as String,
              amount: (json['amount'] as num).toDouble(),
              date: DateTime.parse(json['date'] as String),
              category: json['category'] as String,
            );
          }

          /// ======== СХОВИЩЕ ========
          class ExpenseStore {
            static const _key = 'expenses_v1';

            Future<List<Expense>> load() async {
              final sp = await SharedPreferences.getInstance();
              final raw = sp.getString(_key);
              if (raw == null || raw.isEmpty) return [];
              final list = (jsonDecode(raw) as List)
                  .map((e) => Expense.fromJson(e as Map<String, dynamic>))
                  .toList();
              return list;
            }

            Future<void> save(List<Expense> items) async {
              final sp = await SharedPreferences.getInstance();
              final raw = jsonEncode(items.map((e) => e.toJson()).toList());
              await sp.setString(_key, raw);
            }
          }

          /// ======== ЕКРАН ========
          class HomePage extends StatefulWidget {
            const HomePage({super.key});
            @override
            State<HomePage> createState() => _HomePageState();
          }

          class _HomePageState extends State<HomePage> {
            final _store = ExpenseStore();
            final _fmt = NumberFormat.currency(locale: 'uk_UA', symbol: '₴');
            final _dateFmt = DateFormat('dd.MM.yyyy');

            List<Expense> _items = [];
            bool _loading = true;

            final _categories = <String>[
              'Продукти',
              'Транспорт',
              'Кафе',
              'Комуналка',
              'Одяг',
              'Інше',
            ];

            @override
            void initState() {
              super.initState();
              _load();
            }

            Future<void> _load() async {
              final data = await _store.load();
              setState(() {
                _items = data;
                _loading = false;
              });
            }

            double get _total =>
                _items.fold(0.0, (sum, e) => sum + e.amount);

            Future<void> _addExpenseDialog() async {
              final titleCtrl = TextEditingController();
              final amountCtrl = TextEditingController();
              String category = _categories.first;
              DateTime date = DateTime.now();

              await showModalBottomSheet(
                context: context,
                isScrollControlled: true,
                backgroundColor: const Color(0xFF121E17),
                shape: const RoundedRectangleBorder(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(18)),
                ),
                builder: (ctx) {
                  return Padding(
                    padding: EdgeInsets.only(
                      bottom: MediaQuery.of(ctx).viewInsets.bottom + 16,
                      left: 16,
                      right: 16,
                      top: 16,
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Container(
                          height: 4,
                          width: 60,
                          margin: const EdgeInsets.only(bottom: 12),
                          decoration: BoxDecoration(
                            color: Colors.white24,
                            borderRadius: BorderRadius.circular(2),
                          ),
                        ),
                        const Text(
                          'Нова трата',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w700,
                          ),
                        ),
                        const SizedBox(height: 12),
                        TextField(
                          controller: titleCtrl,
                          textInputAction: TextInputAction.next,
                          decoration: const InputDecoration(
                            hintText: 'Назва…',
                            filled: true,
                            fillColor: Color(0xFF0F1A14),
                            border: OutlineInputBorder(
                              borderSide: BorderSide.none,
                              borderRadius: BorderRadius.all(Radius.circular(12)),
                            ),
                          ),
                        ),
                        const SizedBox(height: 10),
                        TextField(
                          controller: amountCtrl,
                          keyboardType:
                              const TextInputType.numberWithOptions(decimal: true),
                          decoration: const InputDecoration(
                            hintText: 'Сума…',
                            filled: true,
                            fillColor: Color(0xFF0F1A14),
                            border: OutlineInputBorder(
                              borderSide: BorderSide.none,
                              borderRadius: BorderRadius.all(Radius.circular(12)),
                            ),
                          ),
                        ),
                        const SizedBox(height: 10),
                        Row(
                          children: [
                            Expanded(
                              child: DropdownButtonFormField<String>(
                                value: category,
                                items: _categories
                                    .map((c) => DropdownMenuItem(
                                          value: c,
                                          child: Text(c),
                                        ))
                                    .toList(),
                                onChanged: (v) {
                                  if (v != null) category = v;
                                },
                                decoration: const InputDecoration(
                                  filled: true,
                                  fillColor: Color(0xFF0F1A14),
                                  border: OutlineInputBorder(
                                    borderSide: BorderSide.none,
                                    borderRadius: BorderRadius.all(Radius.circular(12)),
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 10),
                            TextButton.icon(
                              onPressed: () async {
                                final picked = await showDatePicker(
                                  context: ctx,
                                  firstDate: DateTime(2020),
                                  lastDate: DateTime(2100),
                                  initialDate: date,
                                  builder: (context, child) {
                                    return Theme(
                                      data: Theme.of(context).copyWith(
                                        colorScheme: Theme.of(context)
                                            .colorScheme
                                            .copyWith(primary: const Color(0xFFFFC94A)),
                                      ),
                                      child: child!,
                                    );
                                  },
                                );
                                if (picked != null) {
                                  date = picked;
                                }
                              },
                              icon: const Icon(Icons.calendar_today),
                              label: Text(_dateFmt.format(date)),
                            ),
                          ],
                        ),
                        const SizedBox(height: 14),
                        SizedBox(
                          width: double.infinity,
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFFFFC94A),
                              foregroundColor: Colors.black,
                              padding: const EdgeInsets.symmetric(vertical: 14),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                            onPressed: () {
                              final t = titleCtrl.text.trim();
                              final a = double.tryParse(
                                      amountCtrl.text.replaceAll(',', '.')) ??
                                  0.0;
                              if (t.isEmpty || a <= 0) {
                                Navigator.pop(ctx);
                                return;
                              }
                              final e = Expense(
                                id: DateTime.now().microsecondsSinceEpoch.toString(),
                                title: t,
                                amount: a,
                                date: date,
                                category: category,
                              );
                              setState(() {
                                _items.insert(0, e);
                              });
                              _store.save(_items);
                              Navigator.pop(ctx);
                            },
                            child: const Text(
                              'Додати',
                              style: TextStyle(fontWeight: FontWeight.w700),
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            }

            void _remove(Expense e) {
              setState(() {
                _items.removeWhere((x) => x.id == e.id);
              });
              _store.save(_items);
            }

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: const Text('Розподіл коштів'),
                  actions: [
                    Padding(
                      padding: const EdgeInsets.only(right: 12),
                      child: Center(
                        child: Text(
                          _fmt.format(_total),
                          style: const TextStyle(
                            fontWeight: FontWeight.w700,
                            color: Color(0xFFFFC94A),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                floatingActionButton: FloatingActionButton.extended(
                  onPressed: _addExpenseDialog,
                  icon: const Icon(Icons.add),
                  label: const Text('Додати'),
                ),
                body: _loading
                    ? const Center(child: CircularProgressIndicator())
                    : _items.isEmpty
                        ? const Center(
                            child: Text(
                              'Поки що немає витрат.\nНатисни «Додати».',
                              textAlign: TextAlign.center,
                              style: TextStyle(color: Colors.white70),
                            ),
                          )
                        : ListView.builder(
                            padding: const EdgeInsets.symmetric(vertical: 8),
                            itemCount: _items.length,
                            itemBuilder: (ctx, i) {
                              final e = _items[i];
                              return Dismissible(
                                key: ValueKey(e.id),
                                background: Container(
                                  margin: const EdgeInsets.symmetric(
                                      horizontal: 12, vertical: 6),
                                  decoration: BoxDecoration(
                                    color: Colors.red.shade700,
                                    borderRadius: BorderRadius.circular(14),
                                  ),
                                  alignment: Alignment.centerRight,
                                  padding: const EdgeInsets.only(right: 20),
                                  child: const Icon(Icons.delete, color: Colors.white),
                                ),
                                direction: DismissDirection.endToStart,
                                onDismissed: (_) => _remove(e),
                                child: Card(
                                  child: ListTile(
                                    leading: CircleAvatar(
                                      backgroundColor: const Color(0xFFFFC94A),
                                      foregroundColor: Colors.black,
                                      child: Text(e.category.characters.first),
                                    ),
                                    title: Text(e.title),
                                    subtitle: Text(
                                      '${e.category} • ${_dateFmt.format(e.date)}',
                                      style: const TextStyle(color: Colors.white70),
                                    ),
                                    trailing: Text(
                                      _fmt.format(e.amount),
                                      style: const TextStyle(
                                        fontWeight: FontWeight.w700,
                                        color: Color(0xFFFFC94A),
                                      ),
                                    ),
                                  ),
                                ),
                              );
                            },
                          ),
              );
            }
          }
          EOF

      # 4) Встановити пакети
      - name: flutter pub get
        working-directory: app
        run: flutter pub get

      # 5) Зібрати спліт-APK під різні ABI
      - name: Build split APKs (debug)
        working-directory: app
        run: flutter build apk --debug --split-per-abi

      # 6) Завантажити артефакти
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: retro_apk_debug_split
          path: app/build/app/outputs/flutter-apk/*.apk
